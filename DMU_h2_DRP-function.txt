dmu_h2<-function(dmu_parout,dmu_paroutstd){
  #总的矩阵个数
  matrix_num<-max(dmu_parout[,1])
  #有几个性状
  trait_num<-max(dmu_parout[which(dmu_parout[,1]==1),2])
  if(matrix_num<3){
    #单性状模型
    print(paste("trait number:",trait_num,sep = ""))
    h2_matrix<-matrix(NA,nrow = trait_num,ncol = 4)
    #加性遗传相关矩阵
    matrix_Ga2<-dmu_parout[which(dmu_parout[,1]==1),]
    for(i in 1:trait_num){
      h2_matrix[i,1]<-matrix_Ga2[which(matrix_Ga2[,2]==i & matrix_Ga2[,3]==i),4]
    }
    #残差相关矩阵
    matrix_e2<-dmu_parout[which(dmu_parout[,1]==matrix_num),]
    for(i in 1:trait_num){
      h2_matrix[i,2]<-matrix_e2[which(matrix_e2[,2]==i & matrix_e2[,3]==i),4]
    }
    #####-------------计算遗传力--------------####
    h2_matrix[,3]<-h2_matrix[,1]/(h2_matrix[,1]+h2_matrix[,2])
    for(i in 1:trait_num){
      H2<-h2_matrix[i,3]
      Ga2<-h2_matrix[i,1]
      GP2<-h2_matrix[i,1]+h2_matrix[i,2]
      e_Ga2<-(i*(i+1))/2
      e_e2<-((i*(i+1))/2)+(trait_num*(trait_num+1)/2)
      var_Ga2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_Ga2 & dmu_paroutstd[,2] == e_Ga2),4]
      var_e2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_e2 & dmu_paroutstd[,2] == e_e2),4]
      cov_Ga2_e2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_e2 & dmu_paroutstd[,2] == e_Ga2),4]
      var_GP2<-var_Ga2+var_e2+2*(cov_Ga2_e2)
      cov_Ga2_GP2<-var_Ga2+cov_Ga2_e2
      h2_matrix[i,4]<-((H2^2)*(((var_Ga2)/(Ga2^2))+((var_GP2)/(GP2^2))-2*(cov_Ga2_GP2/(Ga2*GP2))))^0.5
    }
    h2_matrix<-as.data.frame(h2_matrix)
    names(h2_matrix)=c("Ga2","Ge2","H2","SE_H2")
    write.csv(h2_matrix,paste(file_name,"_h2_matrix.csv",sep = ""),quote = F,row.names = F)
    print("H2 file succefully done")
  }else{
    print(paste("trait number:",trait_num,sep = ""))
    #多性状重复力模型/单性状重复力模型
    h2_matrix<-matrix(NA,nrow = trait_num,ncol = 6)
    #加性遗传相关矩阵
    matrix_Ga2<-dmu_parout[which(dmu_parout[,1]==1),]
    for(i in 1:trait_num){
      h2_matrix[i,1]<-matrix_Ga2[which(matrix_Ga2[,2]==i & matrix_Ga2[,3]==i),4]
    }
    #永久环境效应相关矩阵
    matrix_Ep2<-dmu_parout[which(dmu_parout[,1]==2),]
    for(i in 1:trait_num){
      h2_matrix[i,2]<-matrix_Ep2[which(matrix_Ep2[,2]==i & matrix_Ep2[,3]==i),4]
    }
    #残差相关矩阵
    matrix_e2<-dmu_parout[which(dmu_parout[,1]==matrix_num),]
    for(i in 1:trait_num){
      h2_matrix[i,3]<-matrix_e2[which(matrix_e2[,2]==i & matrix_e2[,3]==i),4]
    }
    #####-------------计算遗传力，SE，重复力---------------####
    h2_matrix[,4]<-h2_matrix[,1]/(h2_matrix[,1]+h2_matrix[,2]+h2_matrix[,3])
    for(i in 1:trait_num){
      H2<-h2_matrix[i,4]
      Ga2<-h2_matrix[i,1]
      GP2<-h2_matrix[i,1]+h2_matrix[i,2]+h2_matrix[i,3]
      e_Ga2<-(i*(i+1))/2
      e_Ep2<-((i*(i+1))/2)+(trait_num*(trait_num+1)/2)
      e_e2<-((i*(i+1))/2)+(trait_num*(trait_num+1))
      var_Ga2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_Ga2 & dmu_paroutstd[,2] == e_Ga2),4]
      var_Ep2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_Ep2 & dmu_paroutstd[,2] == e_Ep2),4]
      var_e2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_e2 & dmu_paroutstd[,2] == e_e2),4]
      cov_Ga2_Ep2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_Ep2 & dmu_paroutstd[,2] == e_Ga2),4]
      cov_Ga2_e2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_e2 & dmu_paroutstd[,2] == e_Ga2),4]
      cov_e2_Ep2<-dmu_paroutstd[which(dmu_paroutstd[,1] == e_e2 & dmu_paroutstd[,2] == e_Ep2),4]
      var_GP2<-var_Ga2+var_Ep2+var_e2+2*(cov_Ga2_Ep2+cov_Ga2_e2+cov_e2_Ep2)
      cov_Ga2_GP2<-var_Ga2+cov_Ga2_Ep2+cov_Ga2_e2
      h2_matrix[i,5]<-((H2^2)*(((var_Ga2)/(Ga2^2))+((var_GP2)/(GP2^2))-2*(cov_Ga2_GP2/(Ga2*GP2))))^0.5
    }
    h2_matrix[,6]<-(h2_matrix[,1]+h2_matrix[,2])/(h2_matrix[,1]+h2_matrix[,2]+h2_matrix[,3])
    h2_matrix<-as.data.frame(h2_matrix)
    names(h2_matrix)=c("Ga2","Gpe2","Ge2","H2","SE_H2","REP2")
    write.csv(h2_matrix,paste(file_name,"_h2_matrix.csv",sep = ""),quote = F,row.names = F)
    print("H2 file succefully done")
  }
}
dmu_DRP<-function(dmu_parout,dmu_result,ped){
  #总的矩阵个数
  matrix_num<-max(dmu_parout[,1])
  #有几个性状
  trait_num<-max(dmu_parout[which(dmu_parout[,1]==1),2])
  if(matrix_num<3){
    #单性状模型
    h2_matrix<-matrix(NA,nrow = trait_num,ncol = 3)
    #加性遗传相关矩阵
    matrix_Ga2<-dmu_parout[which(dmu_parout[,1]==1),]
    for(i in 1:trait_num){
      h2_matrix[i,1]<-matrix_Ga2[which(matrix_Ga2[,2]==i & matrix_Ga2[,3]==i),4]
    }
    #残差相关矩阵
    matrix_e2<-dmu_parout[which(dmu_parout[,1]==matrix_num),]
    for(i in 1:trait_num){
      h2_matrix[i,2]<-matrix_e2[which(matrix_e2[,2]==i & matrix_e2[,3]==i),4]
    }
    #####-------------计算遗传力--------------####
    h2_matrix[,3]<-h2_matrix[,1]/(h2_matrix[,1]+h2_matrix[,2])
    h2_matrix<-as.data.frame(h2_matrix)
    names(h2_matrix)=c("Ga2","Ge2","H2")
  }else{
    #多性状重复力模型/单性状重复力模型
    h2_matrix<-matrix(NA,nrow = trait_num,ncol = 5)
    #加性遗传相关矩阵
    matrix_Ga2<-dmu_parout[which(dmu_parout[,1]==1),]
    for(i in 1:trait_num){
      h2_matrix[i,1]<-matrix_Ga2[which(matrix_Ga2[,2]==i & matrix_Ga2[,3]==i),4]
    }
    #永久环境效应相关矩阵
    matrix_Ep2<-dmu_parout[which(dmu_parout[,1]==2),]
    for(i in 1:trait_num){
      h2_matrix[i,2]<-matrix_Ep2[which(matrix_Ep2[,2]==i & matrix_Ep2[,3]==i),4]
    }
    #残差相关矩阵
    matrix_e2<-dmu_parout[which(dmu_parout[,1]==matrix_num),]
    for(i in 1:trait_num){
      h2_matrix[i,3]<-matrix_e2[which(matrix_e2[,2]==i & matrix_e2[,3]==i),4]
    }
    #####-------------计算遗传力，重复力---------------####
    h2_matrix[,4]<-h2_matrix[,1]/(h2_matrix[,1]+h2_matrix[,2]+h2_matrix[,3])
    h2_matrix[,5]<-(h2_matrix[,1]+h2_matrix[,2])/(h2_matrix[,1]+h2_matrix[,2]+h2_matrix[,3])
    h2_matrix<-as.data.frame(h2_matrix)
    names(h2_matrix)=c("Ga2","Gp2","Ge2","H2","REP2")
  }
  #################--------计算每个个体的reliability-----------------------------###
  dmu_result<-dmu_result[which(dmu_result$V1==4),c(1,2,5,8,9)]
  dmu_result<-dmu_result[,-1]
  names(dmu_result)=c("trait","id","EBV","SE")#分为四列：性状编号、ID、EBV以及计算的SE
  parameter_Ga2<-as.data.frame(cbind(c(1:trait_num),h2_matrix[,1],h2_matrix$H2))
  names(parameter_Ga2)<-c("trait","Ga2","h2")
  dmu_result<-merge(dmu_result,parameter_Ga2,by="trait")
  dmu_result$reli=1-(dmu_result$SE^2/dmu_result$Ga)#计算EBV的可靠性
  dmu_result$reli[dmu_result$reli<0|dmu_result$reli==1]=0#设置若计算可靠性等于1的以及小于0的均为0
  dmu_result<-merge(dmu_result,ped,by="id")
  par(mfrow=c(trait_num,3))
  for(i in 1:trait_num){
    dmu_result_a<-dmu_result[which(dmu_result$trait==i),]
    dmu_result_b<-dmu_result_a[,c(1,3,7)]
    tem_c<-as.data.frame(t(c(0,0,0)))
    names(tem_c)<-names(dmu_result_b)
    dmu_result_d<-rbind(dmu_result_b,tem_c)
    dmu_result_a<-merge(dmu_result_a,dmu_result_d,by.x = "sire",by.y = "id")
    dmu_result_a<-merge(dmu_result_a,dmu_result_d,by.x = "dam",by.y = "id")
    names(dmu_result_a)[c(5,9,11:14)]<-c("i_EBV","i_reli","sire_EBV","sire_reli","dam_EBV","dam_reli")
    dmu_result_a$pa_ebv<-(dmu_result_a$sire_EBV+dmu_result_a$dam_EBV)/2
    dmu_result_a$pa_reli<-(dmu_result_a$sire_reli+dmu_result_a$dam_reli)/2
    dmu_result_a$ERC_pa<-((1-dmu_result_a$h2)/dmu_result_a$h2)*dmu_result_a$pa_reli/(1-dmu_result_a$pa_reli)
    dmu_result_a$ERC_ind_pa<-(((1-dmu_result_a$h2)/dmu_result_a$h2)*dmu_result_a$i_reli/(1-dmu_result_a$i_reli))-dmu_result_a$ERC_pa
    dmu_result_a$DRP<-(dmu_result_a$pa_ebv)+((dmu_result_a$i_EBV-dmu_result_a$pa_ebv)/(dmu_result_a$ERC_ind_pa/(dmu_result_a$ERC_ind_pa+dmu_result_a$ERC_pa+1)))
    resul_DRP=dmu_result_a[,c(4,3,2,1,10,5:9,19)]
    hist(resul_DRP[which(resul_DRP$trait==i),which(names(resul_DRP)=="i_EBV")],xlab = paste("trait_",i,"EBV"),main = "")
    hist(resul_DRP[which(resul_DRP$trait==i),which(names(resul_DRP)=="i_reli")],xlab = paste("trait_",i,"reliability"),main = "")
    hist(resul_DRP[which(resul_DRP$trait==i),which(names(resul_DRP)=="DRP")],xlab = paste("trait_",i,"DRP"),main = "")
    write.csv(resul_DRP,paste("dmu_result_DRP_trait",i,".csv"),quote = F,row.names = F)
    print(paste("Total ",trait_num," trait"," now trait ",i," finished",sep = ""))}
}